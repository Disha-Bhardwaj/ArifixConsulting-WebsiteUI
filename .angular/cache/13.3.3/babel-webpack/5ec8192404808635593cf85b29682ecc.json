{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, HostListener, EventEmitter, Component, ChangeDetectionStrategy, ViewChildren, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormArray, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"otpInputElement\"];\n\nfunction NgxOtpInputComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"label\")(2, \"input\", 3, 4);\n    i0.ɵɵlistener(\"keyup\", function NgxOtpInputComponent_div_1_Template_input_keyup_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.handleKeyUp(i_r2, $event.key);\n    })(\"keyup.backspace\", function NgxOtpInputComponent_div_1_Template_input_keyup_backspace_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.handleDelete(i_r2);\n    })(\"keyup.arrowLeft\", function NgxOtpInputComponent_div_1_Template_input_keyup_arrowLeft_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.stepBackward(i_r2);\n    })(\"keyup.arrowRight\", function NgxOtpInputComponent_div_1_Template_input_keyup_arrowRight_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.stepForward(i_r2);\n    })(\"focus\", function NgxOtpInputComponent_div_1_Template_input_focus_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.handleFocus(i_r2);\n    });\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const control_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.otpConfig.classList == null ? null : ctx_r0.otpConfig.classList.inputBox);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabels[i_r2]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"ngx-otp-input-\" + i_r2)(\"formControl\", control_r1)(\"ngxOtpPattern\", ctx_r0.otpConfig.pattern)(\"type\", ctx_r0.otpConfig.isPasswordInput ? \"password\" : \"text\")(\"ngClass\", ctx_r0.styles[i_r2]);\n  }\n}\n\nvar NgxOtpBehavior;\n\n(function (NgxOtpBehavior) {\n  NgxOtpBehavior[NgxOtpBehavior[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  NgxOtpBehavior[NgxOtpBehavior[\"LEGACY\"] = 1] = \"LEGACY\";\n})(NgxOtpBehavior || (NgxOtpBehavior = {}));\n\nclass NgxOtpInputService {\n  init2DArray(size) {\n    return new Array(size).fill(new Array());\n  }\n\n  toArray(value) {\n    return Array.isArray(value) ? value : [value];\n  }\n\n  addItemToAll(source, items) {\n    return source.map(entry => entry.concat(items));\n  }\n\n  removeItemFromAll(source, items) {\n    return source.map(entry => entry.filter(item => !items.includes(item)));\n  }\n\n  addItemAtIndex(source, index, items) {\n    source[index] = source[index].concat(items);\n    return source;\n  }\n\n  removeItemAtIndex(source, index, items) {\n    source[index] = source[index].filter(item => !items.includes(item));\n    return source;\n  }\n\n}\n\nNgxOtpInputService.ɵfac = function NgxOtpInputService_Factory(t) {\n  return new (t || NgxOtpInputService)();\n};\n\nNgxOtpInputService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxOtpInputService,\n  factory: NgxOtpInputService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxOtpInputService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass PatternDirective {\n  constructor() {\n    // allowed keys apart from numeric characters\n    this.allowedKeys = ['Backspace', 'ArrowLeft', 'ArrowRight', 'Escape', 'Tab'];\n  }\n\n  onKeyDown(e) {\n    if (this.allowedKeys.includes(e.key) || e.code === 'KeyA' && e.ctrlKey === true || // Allow: Ctrl+A\n    e.code === 'KeyC' && e.ctrlKey === true || // Allow: Ctrl+C\n    e.code === 'KeyV' && e.ctrlKey === true || // Allow: Ctrl+V\n    e.code === 'KeyX' && e.ctrlKey === true || // Allow: Ctrl+X\n    e.code === 'KeyA' && e.metaKey === true || // Cmd+A (Mac)\n    e.code === 'KeyC' && e.metaKey === true || // Cmd+C (Mac)\n    e.code === 'KeyV' && e.metaKey === true || // Cmd+V (Mac)\n    e.code === 'KeyX' && e.metaKey === true // Cmd+X (Mac)\n    ) {\n      return; // let it happen, don't do anything\n    } else if (!this.pattern.test(e.key)) {\n      e.preventDefault();\n    }\n  }\n\n}\n\nPatternDirective.ɵfac = function PatternDirective_Factory(t) {\n  return new (t || PatternDirective)();\n};\n\nPatternDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: PatternDirective,\n  selectors: [[\"\", \"ngxOtpPattern\", \"\"]],\n  hostBindings: function PatternDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function PatternDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    pattern: [\"ngxOtpPattern\", \"pattern\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PatternDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxOtpPattern]'\n    }]\n  }], null, {\n    pattern: [{\n      type: Input,\n      args: ['ngxOtpPattern']\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass NgxOtpInputComponent {\n  constructor(ngxOtpInputService, ref) {\n    this.ngxOtpInputService = ngxOtpInputService;\n    this.ref = ref;\n    this.ngxOtpArray = new FormArray([]);\n    this.ariaLabels = [];\n    this.styles = [];\n    this.otpConfig = {\n      otpLength: 6,\n      autofocus: true,\n      autoblur: true,\n      behavior: NgxOtpBehavior.DEFAULT\n    };\n    this.defaultPattern = /^\\d+$/;\n    this.DEFAULT_ARIA_LABEL = 'One time password input';\n    this.isNgxOtpArrayDisabled = false;\n    this.focusedInputHasValue = false;\n    this.otpChange = new EventEmitter();\n    this.fill = new EventEmitter();\n  }\n\n  onPaste(event) {\n    event.preventDefault();\n    this.handlePaste(event.clipboardData.getData('text'));\n  }\n\n  set disable(isDisabled) {\n    this.handleDisable(isDisabled);\n    this.isNgxOtpArrayDisabled = isDisabled;\n  }\n\n  set config(c) {\n    var _a;\n\n    this.otpConfig = Object.assign(Object.assign({}, this.otpConfig), c);\n\n    if ((_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.input) {\n      this.setInitialStyles();\n    }\n\n    if (!c.pattern) {\n      this.otpConfig.pattern = this.defaultPattern;\n    }\n  }\n\n  set status(status) {\n    this.handleStatusChange(status);\n  }\n\n  ngOnInit() {\n    this.setUpOtpForm();\n    this.setUpAriaLabels();\n    this.LAST_INPUT_INDEX = this.otpConfig.otpLength - 1;\n    this.otpFormChangeListener();\n  }\n\n  ngAfterViewInit() {\n    this.setNativeHTMLElements();\n    this.setInitialFocus();\n    this.setNumericInputIfPossible();\n    this.handleDisable(this.isNgxOtpArrayDisabled);\n  }\n\n  ngOnDestroy() {\n    this.ngxOtpArray$.unsubscribe();\n  }\n\n  clear() {\n    var _a;\n\n    this.removeStyleFromAll((_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputFilled);\n    this.ngxOtpArray.reset();\n    this.ref.detectChanges();\n\n    if (this.otpConfig.autofocus) {\n      this.setFocus(0);\n    }\n  }\n\n  handleKeyUp(index, value) {\n    var _a;\n\n    if (this.otpConfig.pattern.test(value) && value !== 'Backspace') {\n      this.addStyle(index, (_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputFilled);\n\n      if (!this.ngxOtpArray.valid) {\n        this.getFormControlByIndex(index).setValue(value);\n        this.stepForward(index);\n      } else {\n        this.blur();\n      }\n    }\n  }\n\n  handleDelete(index) {\n    var _a;\n\n    this.removeStyle(index, (_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputFilled);\n\n    if (this.otpConfig.behavior === NgxOtpBehavior.LEGACY && !this.focusedInputHasValue || this.otpConfig.behavior !== NgxOtpBehavior.LEGACY) {\n      this.stepBackward(index);\n    } else {\n      this.focusedInputHasValue = false;\n    }\n  }\n\n  handleFocus(index) {\n    this.focusedInputHasValue = !!this.ngxOtpArray.controls[index].value;\n\n    if (this.otpConfig.behavior === NgxOtpBehavior.LEGACY && this.focusedInputHasValue) {\n      this.inputs[index].select();\n    }\n  }\n\n  stepBackward(index) {\n    if (index > 0) {\n      this.setFocus(index - 1);\n    }\n  }\n\n  stepForward(index) {\n    if (index < this.LAST_INPUT_INDEX) {\n      this.setFocus(index + 1);\n    }\n  }\n\n  otpFormChangeListener() {\n    this.ngxOtpArray$ = this.ngxOtpArray.valueChanges.subscribe(values => {\n      this.otpChange.emit(values);\n\n      if (this.ngxOtpArray.valid) {\n        this.fill.emit(values.join(''));\n      }\n    });\n  }\n\n  setUpOtpForm() {\n    for (let i = 0; i < this.otpConfig.otpLength; i++) {\n      this.ngxOtpArray.push(new FormControl(null, [Validators.required]));\n    }\n  }\n\n  setUpAriaLabels() {\n    const labels = this.otpConfig.ariaLabels;\n    this.ariaLabels = Array.isArray(labels) ? labels : new Array(this.otpConfig.otpLength).fill(labels || this.DEFAULT_ARIA_LABEL);\n  }\n\n  setNativeHTMLElements() {\n    this.inputs = this.otpInputElements.map(element => element.nativeElement);\n  }\n\n  setInitialFocus() {\n    if (this.otpConfig.autofocus) {\n      this.setFocus(0);\n    }\n  }\n\n  setInitialStyles() {\n    this.styles = this.ngxOtpInputService.init2DArray(this.otpConfig.otpLength);\n    this.addStyleToAll(this.otpConfig.classList.input);\n  }\n\n  setFocus(index) {\n    this.inputs[index].focus();\n  }\n\n  setNumericInputIfPossible() {\n    if (this.otpConfig.numericInputMode) {\n      this.otpConfig.pattern = this.defaultPattern;\n      this.inputs.map(element => {\n        element.setAttribute('inputmode', 'numeric');\n        element.setAttribute('pattern', '[0-9]*');\n      });\n    }\n  }\n\n  blur() {\n    if (this.otpConfig.autoblur) {\n      this.inputs.map(input => input.blur());\n    }\n  }\n\n  handlePaste(value) {\n    if (this.otpConfig.pattern.test(value)) {\n      let lastIndex = 0;\n      value.split('').slice(0, this.otpConfig.otpLength).map((character, index) => {\n        var _a;\n\n        this.addStyle(index, (_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputFilled);\n        this.getFormControlByIndex(index).setValue(character);\n        lastIndex = index;\n      });\n\n      if (this.ngxOtpArray.valid) {\n        this.blur();\n      } else {\n        this.setFocus(lastIndex + 1);\n      }\n    }\n  }\n\n  handleDisable(isDisabled) {\n    var _a, _b;\n\n    if (isDisabled) {\n      this.ngxOtpArray.disable();\n      this.addStyleToAll((_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputDisabled);\n    } else {\n      this.ngxOtpArray.enable();\n      this.removeStyleFromAll((_b = this.otpConfig.classList) === null || _b === void 0 ? void 0 : _b.inputDisabled);\n    }\n  }\n\n  handleStatusChange(status) {\n    var _a, _b, _c, _d;\n\n    this.removeStyleFromAll([...this.ngxOtpInputService.toArray((_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputSuccess), ...this.ngxOtpInputService.toArray((_b = this.otpConfig.classList) === null || _b === void 0 ? void 0 : _b.inputError)]);\n\n    if (status) {\n      if (status === 'success') {\n        this.addStyleToAll((_c = this.otpConfig.classList) === null || _c === void 0 ? void 0 : _c.inputSuccess);\n      } else if (status === 'error') {\n        this.addStyleToAll((_d = this.otpConfig.classList) === null || _d === void 0 ? void 0 : _d.inputError);\n      }\n    }\n  }\n\n  getFormControlByIndex(index) {\n    return this.ngxOtpArray.controls[index];\n  }\n\n  addStyle(index, styles) {\n    this.styles = this.ngxOtpInputService.addItemAtIndex(this.styles, index, this.ngxOtpInputService.toArray(styles));\n  }\n\n  addStyleToAll(styles) {\n    this.styles = this.ngxOtpInputService.addItemToAll(this.styles, this.ngxOtpInputService.toArray(styles));\n  }\n\n  removeStyle(index, styles) {\n    this.styles = this.ngxOtpInputService.removeItemAtIndex(this.styles, index, this.ngxOtpInputService.toArray(styles));\n  }\n\n  removeStyleFromAll(styles) {\n    this.styles = this.ngxOtpInputService.removeItemFromAll(this.styles, this.ngxOtpInputService.toArray(styles));\n  }\n\n}\n\nNgxOtpInputComponent.ɵfac = function NgxOtpInputComponent_Factory(t) {\n  return new (t || NgxOtpInputComponent)(i0.ɵɵdirectiveInject(NgxOtpInputService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNgxOtpInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxOtpInputComponent,\n  selectors: [[\"ngx-otp-input\"]],\n  viewQuery: function NgxOtpInputComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.otpInputElements = _t);\n    }\n  },\n  hostBindings: function NgxOtpInputComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"paste\", function NgxOtpInputComponent_paste_HostBindingHandler($event) {\n        return ctx.onPaste($event);\n      });\n    }\n  },\n  inputs: {\n    disable: \"disable\",\n    config: \"config\",\n    status: \"status\"\n  },\n  outputs: {\n    otpChange: \"otpChange\",\n    fill: \"fill\"\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"ngx-otp-input-container\", 3, \"ngClass\"], [\"class\", \"ngx-otp-input-box\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"ngx-otp-input-box\", 3, \"ngClass\"], [\"maxlength\", \"1\", \"autocapitalize\", \"off\", \"spellcheck\", \"false\", 1, \"ngx-otp-input\", 3, \"id\", \"formControl\", \"ngxOtpPattern\", \"type\", \"ngClass\", \"keyup\", \"keyup.backspace\", \"keyup.arrowLeft\", \"keyup.arrowRight\", \"focus\"], [\"otpInputElement\", \"\"]],\n  template: function NgxOtpInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵtemplate(1, NgxOtpInputComponent_div_1_Template, 4, 7, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", ctx.otpConfig.classList == null ? null : ctx.otpConfig.classList.container);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ngxOtpArray.controls);\n    }\n  },\n  directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm, i3.NgClass, i3.NgForOf, i2.DefaultValueAccessor, i2.MaxLengthValidator, i2.NgControlStatus, i2.FormControlDirective, PatternDirective],\n  styles: [\".ngx-otp-input-container[_ngcontent-%COMP%]{display:flex}.ngx-otp-input-box[_ngcontent-%COMP%]{margin:0 5px}.ngx-otp-input-box[_ngcontent-%COMP%]:first-child{margin-left:0}.ngx-otp-input-box[_ngcontent-%COMP%]:last-child{margin-right:0}.ngx-otp-input[_ngcontent-%COMP%]{width:35px;height:35px;text-align:center;font-size:1.25rem;border:1px solid #212121;border-radius:4px;outline:0}.ngx-otp-input-disabled[_ngcontent-%COMP%]{opacity:.3}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxOtpInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-otp-input',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<form\\n  [ngClass]=\\\"otpConfig.classList?.container\\\"\\n  class=\\\"ngx-otp-input-container\\\"\\n>\\n  <div\\n    *ngFor=\\\"let control of ngxOtpArray.controls; let i = index\\\"\\n    [ngClass]=\\\"otpConfig.classList?.inputBox\\\"\\n    class=\\\"ngx-otp-input-box\\\"\\n  >\\n    <label [attr.aria-label]=\\\"ariaLabels[i]\\\">\\n      <input\\n        #otpInputElement\\n        [id]=\\\"'ngx-otp-input-' + i\\\"\\n        [formControl]=\\\"control\\\"\\n        [ngxOtpPattern]=\\\"otpConfig.pattern\\\"\\n        [type]=\\\"otpConfig.isPasswordInput ? 'password' : 'text'\\\"\\n        [ngClass]=\\\"styles[i]\\\"\\n        (keyup)=\\\"handleKeyUp(i, $event.key)\\\"\\n        (keyup.backspace)=\\\"handleDelete(i)\\\"\\n        (keyup.arrowLeft)=\\\"stepBackward(i)\\\"\\n        (keyup.arrowRight)=\\\"stepForward(i)\\\"\\n        (focus)=\\\"handleFocus(i)\\\"\\n        class=\\\"ngx-otp-input\\\"\\n        maxlength=\\\"1\\\"\\n        autocapitalize=\\\"off\\\"\\n        spellcheck=\\\"false\\\"\\n      />\\n    </label>\\n  </div>\\n</form>\\n\",\n      styles: [\".ngx-otp-input-container{display:flex}.ngx-otp-input-box{margin:0 5px}.ngx-otp-input-box:first-child{margin-left:0}.ngx-otp-input-box:last-child{margin-right:0}.ngx-otp-input{width:35px;height:35px;text-align:center;font-size:1.25rem;border:1px solid #212121;border-radius:4px;outline:0}.ngx-otp-input-disabled{opacity:.3}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxOtpInputService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    otpInputElements: [{\n      type: ViewChildren,\n      args: ['otpInputElement']\n    }],\n    otpChange: [{\n      type: Output\n    }],\n    fill: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste', ['$event']]\n    }],\n    disable: [{\n      type: Input\n    }],\n    config: [{\n      type: Input\n    }],\n    status: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxOtpInputModule {}\n\nNgxOtpInputModule.ɵfac = function NgxOtpInputModule_Factory(t) {\n  return new (t || NgxOtpInputModule)();\n};\n\nNgxOtpInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxOtpInputModule\n});\nNgxOtpInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NgxOtpInputService],\n  imports: [[ReactiveFormsModule, FormsModule, CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxOtpInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxOtpInputComponent, PatternDirective],\n      imports: [ReactiveFormsModule, FormsModule, CommonModule],\n      exports: [NgxOtpInputComponent],\n      providers: [NgxOtpInputService]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-otp-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxOtpBehavior, NgxOtpInputComponent, NgxOtpInputModule };","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/arifix consulting/updated code/node_modules/ngx-otp-input/fesm2015/ngx-otp-input.mjs"],"names":["i0","Injectable","Directive","Input","HostListener","EventEmitter","Component","ChangeDetectionStrategy","ViewChildren","Output","NgModule","i2","FormArray","FormControl","Validators","ReactiveFormsModule","FormsModule","i3","CommonModule","NgxOtpBehavior","NgxOtpInputService","init2DArray","size","Array","fill","toArray","value","isArray","addItemToAll","source","items","map","entry","concat","removeItemFromAll","filter","item","includes","addItemAtIndex","index","removeItemAtIndex","ɵfac","ɵprov","type","PatternDirective","constructor","allowedKeys","onKeyDown","e","key","code","ctrlKey","metaKey","pattern","test","preventDefault","ɵdir","args","selector","NgxOtpInputComponent","ngxOtpInputService","ref","ngxOtpArray","ariaLabels","styles","otpConfig","otpLength","autofocus","autoblur","behavior","DEFAULT","defaultPattern","DEFAULT_ARIA_LABEL","isNgxOtpArrayDisabled","focusedInputHasValue","otpChange","onPaste","event","handlePaste","clipboardData","getData","disable","isDisabled","handleDisable","config","c","_a","Object","assign","classList","input","setInitialStyles","status","handleStatusChange","ngOnInit","setUpOtpForm","setUpAriaLabels","LAST_INPUT_INDEX","otpFormChangeListener","ngAfterViewInit","setNativeHTMLElements","setInitialFocus","setNumericInputIfPossible","ngOnDestroy","ngxOtpArray$","unsubscribe","clear","removeStyleFromAll","inputFilled","reset","detectChanges","setFocus","handleKeyUp","addStyle","valid","getFormControlByIndex","setValue","stepForward","blur","handleDelete","removeStyle","LEGACY","stepBackward","handleFocus","controls","inputs","select","valueChanges","subscribe","values","emit","join","i","push","required","labels","otpInputElements","element","nativeElement","addStyleToAll","focus","numericInputMode","setAttribute","lastIndex","split","slice","character","_b","inputDisabled","enable","_c","_d","inputSuccess","inputError","ChangeDetectorRef","ɵcmp","ɵNgNoValidate","NgControlStatusGroup","NgForm","NgClass","NgForOf","DefaultValueAccessor","MaxLengthValidator","NgControlStatus","FormControlDirective","changeDetection","OnPush","template","NgxOtpInputModule","ɵmod","ɵinj","declarations","imports","exports","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, HostListener, EventEmitter, Component, ChangeDetectionStrategy, ViewChildren, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormArray, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nvar NgxOtpBehavior;\n(function (NgxOtpBehavior) {\n    NgxOtpBehavior[NgxOtpBehavior[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    NgxOtpBehavior[NgxOtpBehavior[\"LEGACY\"] = 1] = \"LEGACY\";\n})(NgxOtpBehavior || (NgxOtpBehavior = {}));\n\nclass NgxOtpInputService {\n    init2DArray(size) {\n        return new Array(size).fill(new Array());\n    }\n    toArray(value) {\n        return Array.isArray(value) ? value : [value];\n    }\n    addItemToAll(source, items) {\n        return source.map((entry) => entry.concat(items));\n    }\n    removeItemFromAll(source, items) {\n        return source.map((entry) => entry.filter((item) => !items.includes(item)));\n    }\n    addItemAtIndex(source, index, items) {\n        source[index] = source[index].concat(items);\n        return source;\n    }\n    removeItemAtIndex(source, index, items) {\n        source[index] = source[index].filter((item) => !items.includes(item));\n        return source;\n    }\n}\nNgxOtpInputService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgxOtpInputService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputService, decorators: [{\n            type: Injectable\n        }] });\n\nclass PatternDirective {\n    constructor() {\n        // allowed keys apart from numeric characters\n        this.allowedKeys = [\n            'Backspace',\n            'ArrowLeft',\n            'ArrowRight',\n            'Escape',\n            'Tab',\n        ];\n    }\n    onKeyDown(e) {\n        if (this.allowedKeys.includes(e.key) ||\n            (e.code === 'KeyA' && e.ctrlKey === true) || // Allow: Ctrl+A\n            (e.code === 'KeyC' && e.ctrlKey === true) || // Allow: Ctrl+C\n            (e.code === 'KeyV' && e.ctrlKey === true) || // Allow: Ctrl+V\n            (e.code === 'KeyX' && e.ctrlKey === true) || // Allow: Ctrl+X\n            (e.code === 'KeyA' && e.metaKey === true) || // Cmd+A (Mac)\n            (e.code === 'KeyC' && e.metaKey === true) || // Cmd+C (Mac)\n            (e.code === 'KeyV' && e.metaKey === true) || // Cmd+V (Mac)\n            (e.code === 'KeyX' && e.metaKey === true) // Cmd+X (Mac)\n        ) {\n            return; // let it happen, don't do anything\n        }\n        else if (!this.pattern.test(e.key)) {\n            e.preventDefault();\n        }\n    }\n}\nPatternDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: PatternDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nPatternDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.2\", type: PatternDirective, selector: \"[ngxOtpPattern]\", inputs: { pattern: [\"ngxOtpPattern\", \"pattern\"] }, host: { listeners: { \"keydown\": \"onKeyDown($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: PatternDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxOtpPattern]',\n                }]\n        }], propDecorators: { pattern: [{\n                type: Input,\n                args: ['ngxOtpPattern']\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass NgxOtpInputComponent {\n    constructor(ngxOtpInputService, ref) {\n        this.ngxOtpInputService = ngxOtpInputService;\n        this.ref = ref;\n        this.ngxOtpArray = new FormArray([]);\n        this.ariaLabels = [];\n        this.styles = [];\n        this.otpConfig = {\n            otpLength: 6,\n            autofocus: true,\n            autoblur: true,\n            behavior: NgxOtpBehavior.DEFAULT,\n        };\n        this.defaultPattern = /^\\d+$/;\n        this.DEFAULT_ARIA_LABEL = 'One time password input';\n        this.isNgxOtpArrayDisabled = false;\n        this.focusedInputHasValue = false;\n        this.otpChange = new EventEmitter();\n        this.fill = new EventEmitter();\n    }\n    onPaste(event) {\n        event.preventDefault();\n        this.handlePaste(event.clipboardData.getData('text'));\n    }\n    set disable(isDisabled) {\n        this.handleDisable(isDisabled);\n        this.isNgxOtpArrayDisabled = isDisabled;\n    }\n    set config(c) {\n        var _a;\n        this.otpConfig = Object.assign(Object.assign({}, this.otpConfig), c);\n        if ((_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.input) {\n            this.setInitialStyles();\n        }\n        if (!c.pattern) {\n            this.otpConfig.pattern = this.defaultPattern;\n        }\n    }\n    set status(status) {\n        this.handleStatusChange(status);\n    }\n    ngOnInit() {\n        this.setUpOtpForm();\n        this.setUpAriaLabels();\n        this.LAST_INPUT_INDEX = this.otpConfig.otpLength - 1;\n        this.otpFormChangeListener();\n    }\n    ngAfterViewInit() {\n        this.setNativeHTMLElements();\n        this.setInitialFocus();\n        this.setNumericInputIfPossible();\n        this.handleDisable(this.isNgxOtpArrayDisabled);\n    }\n    ngOnDestroy() {\n        this.ngxOtpArray$.unsubscribe();\n    }\n    clear() {\n        var _a;\n        this.removeStyleFromAll((_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputFilled);\n        this.ngxOtpArray.reset();\n        this.ref.detectChanges();\n        if (this.otpConfig.autofocus) {\n            this.setFocus(0);\n        }\n    }\n    handleKeyUp(index, value) {\n        var _a;\n        if (this.otpConfig.pattern.test(value) && value !== 'Backspace') {\n            this.addStyle(index, (_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputFilled);\n            if (!this.ngxOtpArray.valid) {\n                this.getFormControlByIndex(index).setValue(value);\n                this.stepForward(index);\n            }\n            else {\n                this.blur();\n            }\n        }\n    }\n    handleDelete(index) {\n        var _a;\n        this.removeStyle(index, (_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputFilled);\n        if ((this.otpConfig.behavior === NgxOtpBehavior.LEGACY &&\n            !this.focusedInputHasValue) ||\n            this.otpConfig.behavior !== NgxOtpBehavior.LEGACY) {\n            this.stepBackward(index);\n        }\n        else {\n            this.focusedInputHasValue = false;\n        }\n    }\n    handleFocus(index) {\n        this.focusedInputHasValue = !!this.ngxOtpArray.controls[index].value;\n        if (this.otpConfig.behavior === NgxOtpBehavior.LEGACY &&\n            this.focusedInputHasValue) {\n            this.inputs[index].select();\n        }\n    }\n    stepBackward(index) {\n        if (index > 0) {\n            this.setFocus(index - 1);\n        }\n    }\n    stepForward(index) {\n        if (index < this.LAST_INPUT_INDEX) {\n            this.setFocus(index + 1);\n        }\n    }\n    otpFormChangeListener() {\n        this.ngxOtpArray$ = this.ngxOtpArray.valueChanges.subscribe((values) => {\n            this.otpChange.emit(values);\n            if (this.ngxOtpArray.valid) {\n                this.fill.emit(values.join(''));\n            }\n        });\n    }\n    setUpOtpForm() {\n        for (let i = 0; i < this.otpConfig.otpLength; i++) {\n            this.ngxOtpArray.push(new FormControl(null, [Validators.required]));\n        }\n    }\n    setUpAriaLabels() {\n        const labels = this.otpConfig.ariaLabels;\n        this.ariaLabels = Array.isArray(labels)\n            ? labels\n            : new Array(this.otpConfig.otpLength).fill(labels || this.DEFAULT_ARIA_LABEL);\n    }\n    setNativeHTMLElements() {\n        this.inputs = this.otpInputElements.map((element) => element.nativeElement);\n    }\n    setInitialFocus() {\n        if (this.otpConfig.autofocus) {\n            this.setFocus(0);\n        }\n    }\n    setInitialStyles() {\n        this.styles = this.ngxOtpInputService.init2DArray(this.otpConfig.otpLength);\n        this.addStyleToAll(this.otpConfig.classList.input);\n    }\n    setFocus(index) {\n        this.inputs[index].focus();\n    }\n    setNumericInputIfPossible() {\n        if (this.otpConfig.numericInputMode) {\n            this.otpConfig.pattern = this.defaultPattern;\n            this.inputs.map((element) => {\n                element.setAttribute('inputmode', 'numeric');\n                element.setAttribute('pattern', '[0-9]*');\n            });\n        }\n    }\n    blur() {\n        if (this.otpConfig.autoblur) {\n            this.inputs.map((input) => input.blur());\n        }\n    }\n    handlePaste(value) {\n        if (this.otpConfig.pattern.test(value)) {\n            let lastIndex = 0;\n            value\n                .split('')\n                .slice(0, this.otpConfig.otpLength)\n                .map((character, index) => {\n                var _a;\n                this.addStyle(index, (_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputFilled);\n                this.getFormControlByIndex(index).setValue(character);\n                lastIndex = index;\n            });\n            if (this.ngxOtpArray.valid) {\n                this.blur();\n            }\n            else {\n                this.setFocus(lastIndex + 1);\n            }\n        }\n    }\n    handleDisable(isDisabled) {\n        var _a, _b;\n        if (isDisabled) {\n            this.ngxOtpArray.disable();\n            this.addStyleToAll((_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputDisabled);\n        }\n        else {\n            this.ngxOtpArray.enable();\n            this.removeStyleFromAll((_b = this.otpConfig.classList) === null || _b === void 0 ? void 0 : _b.inputDisabled);\n        }\n    }\n    handleStatusChange(status) {\n        var _a, _b, _c, _d;\n        this.removeStyleFromAll([\n            ...this.ngxOtpInputService.toArray((_a = this.otpConfig.classList) === null || _a === void 0 ? void 0 : _a.inputSuccess),\n            ...this.ngxOtpInputService.toArray((_b = this.otpConfig.classList) === null || _b === void 0 ? void 0 : _b.inputError),\n        ]);\n        if (status) {\n            if (status === 'success') {\n                this.addStyleToAll((_c = this.otpConfig.classList) === null || _c === void 0 ? void 0 : _c.inputSuccess);\n            }\n            else if (status === 'error') {\n                this.addStyleToAll((_d = this.otpConfig.classList) === null || _d === void 0 ? void 0 : _d.inputError);\n            }\n        }\n    }\n    getFormControlByIndex(index) {\n        return this.ngxOtpArray.controls[index];\n    }\n    addStyle(index, styles) {\n        this.styles = this.ngxOtpInputService.addItemAtIndex(this.styles, index, this.ngxOtpInputService.toArray(styles));\n    }\n    addStyleToAll(styles) {\n        this.styles = this.ngxOtpInputService.addItemToAll(this.styles, this.ngxOtpInputService.toArray(styles));\n    }\n    removeStyle(index, styles) {\n        this.styles = this.ngxOtpInputService.removeItemAtIndex(this.styles, index, this.ngxOtpInputService.toArray(styles));\n    }\n    removeStyleFromAll(styles) {\n        this.styles = this.ngxOtpInputService.removeItemFromAll(this.styles, this.ngxOtpInputService.toArray(styles));\n    }\n}\nNgxOtpInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputComponent, deps: [{ token: NgxOtpInputService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nNgxOtpInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: NgxOtpInputComponent, selector: \"ngx-otp-input\", inputs: { disable: \"disable\", config: \"config\", status: \"status\" }, outputs: { otpChange: \"otpChange\", fill: \"fill\" }, host: { listeners: { \"paste\": \"onPaste($event)\" } }, viewQueries: [{ propertyName: \"otpInputElements\", predicate: [\"otpInputElement\"], descendants: true }], ngImport: i0, template: \"<form\\n  [ngClass]=\\\"otpConfig.classList?.container\\\"\\n  class=\\\"ngx-otp-input-container\\\"\\n>\\n  <div\\n    *ngFor=\\\"let control of ngxOtpArray.controls; let i = index\\\"\\n    [ngClass]=\\\"otpConfig.classList?.inputBox\\\"\\n    class=\\\"ngx-otp-input-box\\\"\\n  >\\n    <label [attr.aria-label]=\\\"ariaLabels[i]\\\">\\n      <input\\n        #otpInputElement\\n        [id]=\\\"'ngx-otp-input-' + i\\\"\\n        [formControl]=\\\"control\\\"\\n        [ngxOtpPattern]=\\\"otpConfig.pattern\\\"\\n        [type]=\\\"otpConfig.isPasswordInput ? 'password' : 'text'\\\"\\n        [ngClass]=\\\"styles[i]\\\"\\n        (keyup)=\\\"handleKeyUp(i, $event.key)\\\"\\n        (keyup.backspace)=\\\"handleDelete(i)\\\"\\n        (keyup.arrowLeft)=\\\"stepBackward(i)\\\"\\n        (keyup.arrowRight)=\\\"stepForward(i)\\\"\\n        (focus)=\\\"handleFocus(i)\\\"\\n        class=\\\"ngx-otp-input\\\"\\n        maxlength=\\\"1\\\"\\n        autocapitalize=\\\"off\\\"\\n        spellcheck=\\\"false\\\"\\n      />\\n    </label>\\n  </div>\\n</form>\\n\", styles: [\".ngx-otp-input-container{display:flex}.ngx-otp-input-box{margin:0 5px}.ngx-otp-input-box:first-child{margin-left:0}.ngx-otp-input-box:last-child{margin-right:0}.ngx-otp-input{width:35px;height:35px;text-align:center;font-size:1.25rem;border:1px solid #212121;border-radius:4px;outline:0}.ngx-otp-input-disabled{opacity:.3}\\n\"], directives: [{ type: i2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: PatternDirective, selector: \"[ngxOtpPattern]\", inputs: [\"ngxOtpPattern\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-otp-input', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<form\\n  [ngClass]=\\\"otpConfig.classList?.container\\\"\\n  class=\\\"ngx-otp-input-container\\\"\\n>\\n  <div\\n    *ngFor=\\\"let control of ngxOtpArray.controls; let i = index\\\"\\n    [ngClass]=\\\"otpConfig.classList?.inputBox\\\"\\n    class=\\\"ngx-otp-input-box\\\"\\n  >\\n    <label [attr.aria-label]=\\\"ariaLabels[i]\\\">\\n      <input\\n        #otpInputElement\\n        [id]=\\\"'ngx-otp-input-' + i\\\"\\n        [formControl]=\\\"control\\\"\\n        [ngxOtpPattern]=\\\"otpConfig.pattern\\\"\\n        [type]=\\\"otpConfig.isPasswordInput ? 'password' : 'text'\\\"\\n        [ngClass]=\\\"styles[i]\\\"\\n        (keyup)=\\\"handleKeyUp(i, $event.key)\\\"\\n        (keyup.backspace)=\\\"handleDelete(i)\\\"\\n        (keyup.arrowLeft)=\\\"stepBackward(i)\\\"\\n        (keyup.arrowRight)=\\\"stepForward(i)\\\"\\n        (focus)=\\\"handleFocus(i)\\\"\\n        class=\\\"ngx-otp-input\\\"\\n        maxlength=\\\"1\\\"\\n        autocapitalize=\\\"off\\\"\\n        spellcheck=\\\"false\\\"\\n      />\\n    </label>\\n  </div>\\n</form>\\n\", styles: [\".ngx-otp-input-container{display:flex}.ngx-otp-input-box{margin:0 5px}.ngx-otp-input-box:first-child{margin-left:0}.ngx-otp-input-box:last-child{margin-right:0}.ngx-otp-input{width:35px;height:35px;text-align:center;font-size:1.25rem;border:1px solid #212121;border-radius:4px;outline:0}.ngx-otp-input-disabled{opacity:.3}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: NgxOtpInputService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { otpInputElements: [{\n                type: ViewChildren,\n                args: ['otpInputElement']\n            }], otpChange: [{\n                type: Output\n            }], fill: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste', ['$event']]\n            }], disable: [{\n                type: Input\n            }], config: [{\n                type: Input\n            }], status: [{\n                type: Input\n            }] } });\n\nclass NgxOtpInputModule {\n}\nNgxOtpInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxOtpInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputModule, declarations: [NgxOtpInputComponent, PatternDirective], imports: [ReactiveFormsModule, FormsModule, CommonModule], exports: [NgxOtpInputComponent] });\nNgxOtpInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputModule, providers: [NgxOtpInputService], imports: [[ReactiveFormsModule, FormsModule, CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxOtpInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgxOtpInputComponent, PatternDirective],\n                    imports: [ReactiveFormsModule, FormsModule, CommonModule],\n                    exports: [NgxOtpInputComponent],\n                    providers: [NgxOtpInputService],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-otp-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxOtpBehavior, NgxOtpInputComponent, NgxOtpInputModule };\n"]},"metadata":{},"sourceType":"module"}